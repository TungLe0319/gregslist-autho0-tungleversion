let Auth0Provider,attachHandlers,accountService,SocketHandler;_d5f‍.x([["AuthHandler",()=>AuthHandler]]);_d5f‍.w("@bcwdev/auth0provider",[["Auth0Provider",["Auth0Provider"],function(v){Auth0Provider=v}]]);_d5f‍.w("../../Setup",[["attachHandlers",["attachHandlers"],function(v){attachHandlers=v}]]);_d5f‍.w("../services/AccountService",[["accountService",["accountService"],function(v){accountService=v}]]);_d5f‍.w("../utils/SocketHandler",[["SocketHandler",["SocketHandler"],function(v){SocketHandler=v}]]);




       class AuthHandler extends _d5f‍.a("SocketHandler",SocketHandler) {
  /**
   * @param {import("socket.io").Server} io
   * @param {import("socket.io").Socket} socket
   */
  constructor(io, socket) {
    super(io, socket)
    this
      .on('authenticate', this.onAuthenticate)
      .on('disconnect', this.onDisconnect)
  }

  async onAuthenticate(bearerToken) {
    try {
      const user = await _d5f‍.a("Auth0Provider",Auth0Provider).getUserInfoFromBearerToken(bearerToken)
      const profile = await _d5f‍.a("accountService",accountService).getAccount(user)
      const limitedProfile = {
        id: profile.id,
        email: profile.email,
        picture: profile.picture
      }
      this.socket.join(user.id)
      _d5f‍.a("attachHandlers",attachHandlers)(this.io, this.socket, user, limitedProfile)
      this.socket.emit('authenticated', limitedProfile)
      this.io.emit('userConnected', limitedProfile)
    } catch (e) {
      this.socket.emit('error', e)
    }
  }

  async onDisconnect() {
    this.io.emit('userDisconnected', this.profile)
  }
};_d5f‍.j(["AuthHandler"]);
